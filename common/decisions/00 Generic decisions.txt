political_actions = {

	generic_raise_stability = {
		#Socialist -> 'Improve Worker Conditions'
		icon = {
			key = generic_industry
			trigger = { has_socialist_government = yes }
		}

		#Liberal -> 'Legislate More Freedoms'
		icon = {
			key = generic_civil_support
			trigger = {
				OR = {
					has_left_democratic_government = yes
					has_government = market_liberal
				}
			}
		}

		#Conservative -> 'Police Crackdown'
		icon = {
			key = oppression
			trigger = {
				OR = {
					has_government = social_conservative
					has_government = authoritarian_democrat
				}
			}
		}

		#Authoritarian -> 'Send in the Army'
		icon = {
			key = generic_army_support
			trigger = { has_dictatorship_government = yes }
		}

		available = {
			has_stability < 1
		}

		modifier = {
			stability_weekly = 0.005
			consumer_goods_factor = 0.1
			industrial_capacity_factory = -0.1
		}

		cost = generic_raise_stability_decision_cost?100
		days_remove = 180
		days_re_enable = 540

		ai_will_do = {
			base = 0
			modifier = {
				add = 1
				has_stability < 0.6
				has_political_power > 175 #Spend on other things first
			}
			modifier = {
				add = 1
				has_political_power > 200
			}
		}
	}

	generic_raise_support = {
		#Democratic -> 'Rally Public Support'
		icon = {
			key = generic_political_rally
			trigger = {
				NOT = {
					has_government = totalist
					has_authoritarian_government = yes
				}
			}
		}

		#Authoritarian -> 'Solidify Control'
		icon = {
			key = eng_propaganda_campaigns
			trigger = {
				OR = {
					has_government = totalist
					has_authoritarian_government = yes
				}
			}
		}

		available = {
			check_variable = {
				tooltip = KR_party_pop_less_than_100
				party_popularity@ruling_party < 1
			}
		}

		cost = generic_raise_support_decision_cost?150
		days_remove = 180
		days_re_enable = 540

		remove_effect = {
			set_temp_variable = { ideology_change_var = 0.1 }
			change_ruling_party_popularity = yes
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 1
				check_variable = { party_popularity@ruling_party < 0.5 }
				has_political_power > 175 #Spend on other things first
			}
			modifier = {
				add = 1
				has_political_power > 200
			}
		}
	}

	seize_some_trains_woo = {
		icon = GFX_decision_hol_draw_up_staff_plans

		visible = {
			has_tech = basic_train
			num_of_factories < 60
		}

		available = {
			has_equipment = { train_equipment < 101 }
		}

		days_remove = 180

		ai_will_do = {
			base = 0
			modifier = {
				add = 1
				has_stability > 0.74
				has_equipment = { train_equipment < 15 }
			}
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision seize_some_trains_woo"
			add_stability = -0.05
			add_equipment_to_stockpile = {
				type = train_equipment
				amount = 15
			}
		}
	}

	restructure_supply_system = { #one time boost to get a few cheap supply hubs
		icon = GFX_decision_generic_construction

		visible = {
			OR = {
				is_major = no
				AND = {
					is_faction_leader = yes
					num_of_factories < 51 #would be a minor if it wasn't for faction leader status
				}
			}
		}

		days_remove = 120
		fire_only_once = yes

		ai_will_do = { factor = 0 }

		modifier = {
			production_speed_supply_node_factor = 3
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision restructure_supply_system"
			set_variable = { node_goal = num_of_supply_nodes }
			add_to_variable = { node_goal = 3 } #maximum 3 additional nodes
		}

		cancel_trigger = {
			check_variable = { node_goal < num_of_supply_nodes } #if the number of supply nodes exceeds the old number by +3, immediately cancel
		}
	}

	#peace conference decisions
	AI_expand_ambition_japan = {
		icon = generic_political_discourse
		allowed = {
			tag = JAP
		}
		available = {
			has_war = yes
		}
		visible = {
			is_ai = yes
			TRM = {
				NOT = {
					is_guaranteed_by = JAP
					is_subject_of = JAP
				}
			}
			408 = {
				NOT = { has_variable = ambition_area_@ROOT }
			}
		}

		cost = 0
		fire_only_once = yes

		ai_will_do = { factor = 100 }

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision AI_expand_ambition_japan"
			every_state = {
				limit = {
					OR = {
						state = 408 #Vladivostok
						state = 409 #Khabarovsk
						state = 560 #Nikolayevsk
						state = 562 #Okhotsk
						state = 637 #Kamchatka
					}
					NOT = { has_variable = ambition_area_@ROOT }
				}
				set_variable = { ambition_area_@ROOT = 1 }
			}
		}
	}

	AI_remove_ambition_japan = {
		icon = generic_political_discourse
		allowed = {
			tag = JAP
		}
		available = {
			has_war = yes
		}
		visible = {
			is_ai = yes
			TRM = {
				OR = {
					is_guaranteed_by = JAP
					is_subject_of = JAP
				}
			}
			408 = {
				has_variable = ambition_area_@ROOT
			}
		}

		cost = 0
		fire_only_once = yes

		ai_will_do = { factor = 100 }

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision AI_remove_ambition_japan"
			every_state = {
				limit = {
					OR = {
						state = 408 #Vladivostok
						state = 409 #Khabarovsk
						state = 560 #Nikolayevsk
						state = 562 #Okhotsk
						state = 637 #Kamchatka
					}
					has_variable = ambition_area_@ROOT
				}
				clear_variable = ambition_area_@ROOT
			}
		}
	}

	AI_expand_ambition_france = {
		icon = generic_political_discourse
		allowed = {
			tag = NFA
		}
		available = {
			has_war = yes
		}
		visible = {
			is_ai = yes
			owns_state = 16 #Paris
		}

		cost = 0
		fire_only_once = yes

		ai_will_do = { factor = 100 }

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision AI_expand_ambition_france"
			every_state = {
				limit = {
					OR = {
						state = 6 #Flanders
						state = 8 #Luxembourg
						state = 34 #Hainaut
						state = 165 #Catalonia
						state = 925 #Brabant
						state = 948 #LiÃ¨ge
						state = 741 #Verviers
						state = 760 #Romandy
					}
					NOT = { has_variable = ambition_area_@ROOT }
				}
				set_variable = { ambition_area_@ROOT = 1 }
			}
		}
	}

	AI_expand_air_bases = {
		icon = generic_political_discourse

		visible = {
			has_global_flag = second_weltkrieg_has_started
			is_ai = yes
			has_war = yes
			has_manpower > 1000 #make sure they're not deploying due to lack of manpower

			#the AI never stockpiles planes if it can avoid it, so a positive stockpile ratio means they've run out of airbase space
			OR = {
				stockpile_ratio = { archetype = small_plane_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = small_plane_cas_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = small_plane_naval_bomber_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = medium_plane_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = medium_plane_fighter_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = medium_plane_scout_plane_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = large_plane_airframe ratio > 0.02 }
				stockpile_ratio = { archetype = large_plane_maritime_patrol_plane_airframe ratio > 0.02 }
			}
		}

		cost = 0
		days_re_enable = 20
		fire_only_once = no
		fixed_random_seed = no

		ai_will_do = { factor = 100 }

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision AI_expand_air_bases"
			every_controlled_state = {
				if = {
					limit = {
						is_fully_controlled_by = ROOT
						air_base < 10
					}
					add_to_temp_array = { air_base_potential_states = THIS }
				}
				if = {
					limit = {
						any_neighbor_state = { controller = { has_war_with = ROOT } }
					}
					if = {
						limit = {
							is_fully_controlled_by = ROOT
							air_base < 10
						}
						add_to_temp_array = { air_base_potential_states_neighbouring_enemy = THIS }
					}
					every_neighbor_state = {
						limit = {
							is_fully_controlled_by = ROOT
							air_base < 10
						}
						add_to_temp_array = { air_base_potential_states_close_to_enemy = THIS }
					}
				}
				if = {
					limit = {
						any_of_scopes = {
							array = air_base_potential_states_neighbouring_enemy
							is_in_home_area = yes
						}
					}
					set_temp_variable = { home_area_neighbouring_enemy = 1 }
				}
				if = {
					limit = {
						any_of_scopes = {
							array = air_base_potential_states_close_to_enemy
							is_in_home_area = yes
						}
					}
					set_temp_variable = { home_area_close_to_enemy = 1 }
				}
				if = {
					limit = {
						any_of_scopes = {
							array = air_base_potential_states
							is_in_home_area = yes
						}
					}
					set_temp_variable = { home_area_potential = 1 }
				}
			}
			random_controlled_state = {
				limit = {
					is_in_array = { air_base_potential_states = THIS }
					if = {
						limit = { has_variable = air_base_potential_states_neighbouring_enemy^num }
						is_in_array = { air_base_potential_states_neighbouring_enemy = THIS }
						if = {
							limit = { has_variable = home_area_neighbouring_enemy }
							is_in_home_area = yes
						}
					}
					else_if = {
						limit = { has_variable = air_base_potential_states_close_to_enemy^num }
						is_in_array = { air_base_potential_states_close_to_enemy = THIS }
						if = {
							limit = { has_variable = home_area_close_to_enemy }
							is_in_home_area = yes
						}
					}
					else_if = {
						limit = { has_variable = home_area_potential }
						is_in_home_area = yes
					}
				}
				add_building_construction = {
					type = air_base
					level = 1
					instant_build = no
				}
			}
		}
	}

	KR_fight_for_independence = {
		icon = generic_independence

		available = {
			has_political_power > 0
			has_stability > 0.70
			surrender_progress < 0.05
		}

		targets = { overlord }
		target_trigger = {
			has_country_flag = KR_independence_refused
			has_autonomy_state = nominal_puppet
			is_subject_of = FROM
		}

		cost = 0
		fire_only_once = yes

		ai_will_do = {
			factor = 100
			modifier = {
				factor = 0
				strength_ratio = { tag = FROM ratio < 1.0 }
			}
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision KR_fight_for_independence target: [From.GetName]"
			clr_country_flag = KR_independence_refused
			FROM = {
				add_opinion_modifier = { target = ROOT modifier = KR_outraged }
				set_autonomy = {
					target = ROOT
					autonomy_state = autonomy_free
				}
			}
			if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
			separate_peace_all_wars = yes
			FROM = {
				country_event = { id = generic_events.109 days = 1 }
			}
		}
	}
}

war_measures = {
	diversify_special_forces = {
		icon = GFX_decision_generic_military

		allowed = {
			has_dlc_aat = yes
		}

		available = {
			date > 1940.1.1
		}

		visible = {
			is_major = yes
		}

		cost = 50
		fire_only_once = yes

		complete_effect = {
			add_potential_special_forces_tree = yes
		}

		ai_will_do = { factor = 100 }
	}
}

crisis = {
	war_exhaustion_mission = {
		icon = generic_ignite_civil_war

		activation = {
			surrender_progress > 0.2
			num_divisions > 20 #don't bother with tiny tags
			is_ai = yes
			OR = {
				is_in_faction = no
				AND = {
					faction_leader = { is_ai = no }
					NOT = {
						any_allied_country = {
							is_major = yes
							is_faction_leader = no
							has_capitulated = no
						}
					}
				}
			}
			if = {
				limit = { original_tag = RUS }
				OR = {
					FRA = { NOT = { has_war_with = GER } }
					FRA = { has_capitulated = yes }
				}
			}
		}

		available = {
			surrender_progress < 0.2
		}

		cancel_trigger = {
			is_ai = no
		}

		days_mission_timeout = 30
		is_good = no

		timeout_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision timeout war_exhaustion_mission"
			#formula = 1 + max (1, 5 - number of controlled states)
			set_temp_variable = { war_support_hit = 5 }
			subtract_from_temp_variable = { war_support_hit = num_of_controlled_states }
			multiply_temp_variable = { war_support_hit = 2 }
			clamp_temp_variable = { var = war_support_hit min = 1 }
			multiply_temp_variable = { war_support_hit = -0.01 }
			add_war_support = var:war_support_hit
		}
	}
}

propaganda_efforts = {

	war_propaganda = {

		icon = GFX_decision_eng_propaganda_campaigns

		available = {
			has_war_support < 0.5
		}

		visible = {
			has_war_with_non_exiled_country = yes
		}

		cost = war_propaganda_decision_cost?150
		days_remove = 90
		days_re_enable = 180

		modifier = {
			war_support_weekly = 0.005
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision war_propaganda"
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 1
				has_war_support < 0.4
				has_war = yes
			}
		}
	}

	war_propaganda_casualties = {

		icon = generic_prepare_civil_war

		available = {
			has_casualties_war_support < 0
		}

		visible = {
			has_war_with_non_exiled_country = yes
		}

		fire_only_once = no

		days_remove = 180

		remove_trigger = {
			has_war = no
		}

		cost = war_propaganda_casualties_decision_cost?100

		modifier = {
			weekly_casualties_war_support = 0.006
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 10 #AI should probably just choose this one for general purposes.
				has_war = yes
				has_war_support < 0.7
			}
			modifier = {
				add = 20
				has_war = yes
				has_war_support < 0.5
			}
			modifier = {
				add = 30
				has_war = yes
				has_war_support < 0.3
			}
			modifier = {
				add = 201 #ie; consider prio idea
				has_war = yes
				has_casualties_war_support < -0.25
			}
			modifier = {
				factor = 0
				has_manpower < 100000
				has_political_power < 250
				OR = {
					has_idea = volunteer_only
					has_idea = limited_conscription
					has_idea = extensive_conscription
				}
			}
		}
	}

	war_propaganda_convoys = {

		icon = GFX_decision_generic_naval

		available = {
			has_convoys_war_support < 0
		}

		visible = {
			has_war_with_non_exiled_country = yes
		}

		fire_only_once = no

		days_remove = 180

		remove_trigger = {
			has_war = no
		}

		cost = war_propaganda_convoys_decision_cost?100

		modifier = {
			weekly_convoys_war_support = 0.006
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 201 #ie; consider prio idea
				has_war = yes
				has_convoys_war_support < -0.29
			}
			modifier = {
				factor = 0
				has_manpower < 100000
				has_political_power < 250
				OR = {
					has_idea = volunteer_only
					has_idea = limited_conscription
					has_idea = extensive_conscription
				}
			}
		}
	}

	war_propaganda_bombing = {

		icon = GFX_decision_generic_air

		available = {
			has_bombing_war_support < 0
		}

		visible = {
			has_war_with_non_exiled_country = yes
		}

		fire_only_once = no

		days_remove = 180

		remove_trigger = {
			has_war = no
		}

		cost = war_propaganda_bombing_decision_cost?100

		modifier = {
			weekly_bombing_war_support = 0.006
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 10 #AI should probably just choose this one for general purposes.
				has_war = yes
				has_war_support < 0.65
			}
			modifier = {
				add = 20
				has_war = yes
				has_war_support < 0.50
			}
			modifier = {
				add = 30
				has_war = yes
				has_war_support < 0.35
			}
			modifier = {
				add = 201 #ie; consider prio idea
				has_war = yes
				has_bombing_war_support < -0.20
			}
			modifier = {
				factor = 0
				has_manpower < 100000
				has_political_power < 250
				OR = {
					has_idea = volunteer_only
					has_idea = limited_conscription
					has_idea = extensive_conscription
				}
			}
		}
	}

	war_propaganda_radio_industry = {

		icon = generic_prepare_civil_war

		available = {
			has_tech = radio
			threat > 0.25
		}

		cost = 75
		fire_only_once = yes

		complete_effect = {
			add_war_support = 0.05
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 201
				has_war_support < 0.6
			}
		}
	}

	war_propaganda_film_industry = {

		icon = generic_prepare_civil_war

		available = {
			has_war_with_non_exiled_country = yes
			OR = {
				is_major = yes
				any_allied_country = { is_major = yes }
			}
			threat > 0.5
		}

		cost = 100
		fire_only_once = yes

		complete_effect = {
			add_war_support = 0.10
		}

		ai_will_do = {
			base = 0
			modifier = {
				add = 201
				has_war_support < 0.6
			}
		}
	}
	KR_end_military_occupations = {
		icon = GFX_decision_CHL_carabineros
		priority = 100

		available = {
			OR = {
				has_war = no
				NOT = { any_neighbor_country = { has_war_with = ROOT } }
			}
		}

		visible = {
			is_ai = no
			has_country_flag = KR_has_active_occupation
		}

		cost = 0
		fire_only_once = no

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision KR_end_military_occupations"
			clr_country_flag = KR_has_active_occupation
			clr_country_flag = ABKHAZIA_CONQ
			clr_country_flag = AEGEAN_CONQ
			clr_country_flag = AEGEAN_MACEDONIA_CONQ
			clr_country_flag = AFG_CONQ
			clr_country_flag = ALAND_CONQ
			clr_country_flag = ALASKA_CONQ
			clr_country_flag = ALB_CONQ
			clr_country_flag = ALG_CONQ
			clr_country_flag = ALO_CONQ
			clr_country_flag = ALSACE_CONQ
			clr_country_flag = AMA_CONQ
			clr_country_flag = ANDHRA_CONQ
			clr_country_flag = ANG_CONQ
			clr_country_flag = ARA_CONQ
			clr_country_flag = ARG_CHACO_CONQ
			clr_country_flag = ARG_CONQ
			clr_country_flag = ARM_CONQ
			clr_country_flag = ASIR_CONQ
			clr_country_flag = ASM_CONQ
			clr_country_flag = AST_CONQ
			clr_country_flag = AUS_CONQ
			clr_country_flag = AUS_TRENT_CONQ
			clr_country_flag = AZR_CONQ
			clr_country_flag = BAH_CONQ
			clr_country_flag = BALUCH_CONQ
			clr_country_flag = BASRA_CONQ
			clr_country_flag = BAS_CONQ
			clr_country_flag = BATTAMBANG_CONQ
			clr_country_flag = BATUMI_CONQ
			clr_country_flag = BAY_CONQ
			clr_country_flag = BEL_CONQ
			clr_country_flag = BHU_CONQ
			clr_country_flag = BIALYSTOK_CONQ
			clr_country_flag = BNG_CONQ
			clr_country_flag = BOL_CONQ
			clr_country_flag = BOM_CONQ
			clr_country_flag = BOS_CONQ
			clr_country_flag = BOT_CONQ
			clr_country_flag = BRA_CONQ
			clr_country_flag = BRD_CONQ
			clr_country_flag = BREST_CONQ
			clr_country_flag = BRI_CONQ
			clr_country_flag = BRM_CONQ
			clr_country_flag = BUKOVINA_CONQ
			clr_country_flag = BUK_CONQ
			clr_country_flag = BUL_CONQ
			clr_country_flag = BURGENLAND_CONQ
			clr_country_flag = CAM_CONQ
			clr_country_flag = CAN_CONQ
			clr_country_flag = CARIBBEAN_CONQ
			clr_country_flag = CAR_CONQ
			clr_country_flag = CAT_CONQ
			clr_country_flag = CA_CONQ
			clr_country_flag = CEN_CONQ
			clr_country_flag = CEY_CONQ
			clr_country_flag = CHA_CONQ
			clr_country_flag = CHELM_CONQ
			clr_country_flag = CHHAT_CONQ
			clr_country_flag = CHI_CONQ
			clr_country_flag = CHL_CONQ
			clr_country_flag = CMR_CONQ
			clr_country_flag = COG_CONQ
			clr_country_flag = COL_CONQ
			clr_country_flag = CONSTANTINOPLE_CONQ
			clr_country_flag = CORSICA_CONQ
			clr_country_flag = COS_CONQ
			clr_country_flag = CRO_CONQ
			clr_country_flag = CRO_DALMATIA_CONQ
			clr_country_flag = CUB_CONQ
			clr_country_flag = CYP_CONQ
			clr_country_flag = CZE_CONQ
			clr_country_flag = DAH_CONQ
			clr_country_flag = DANUBIAN_PLAIN_CONQ
			clr_country_flag = DEN_CONQ
			clr_country_flag = DJIBOUTI_CONQ
			clr_country_flag = DOBROGEA_CONQ
			clr_country_flag = DOM_CONQ
			clr_country_flag = DUNKIRK_CONQ
			clr_country_flag = DVINSK_CONQ
			clr_country_flag = EASTERN_BELARUS_CONQ
			clr_country_flag = EASTPRUSSIA_CONQ
			clr_country_flag = EAST_ODER_CONQ
			clr_country_flag = EAST_TIMOR_CONQ
			clr_country_flag = ECU_CONQ
			clr_country_flag = EGY_CONQ
			clr_country_flag = ELS_CONQ
			clr_country_flag = EMI_CONQ
			clr_country_flag = ENG_CONQ
			clr_country_flag = ERI_CONQ
			clr_country_flag = ESSEQUIBO_CONQ
			clr_country_flag = EST_CONQ
			clr_country_flag = ETH_CONQ
			clr_country_flag = FIN_CONQ
			clr_country_flag = FIUME_CONQ
			clr_country_flag = FLA_CONQ
			clr_country_flag = FRA_CONQ
			clr_country_flag = GAB_CONQ
			clr_country_flag = GAL_CONQ
			clr_country_flag = GEO_CONQ
			clr_country_flag = GER_CONQ
			clr_country_flag = GHA_CONQ
			clr_country_flag = GLC_CONQ
			clr_country_flag = GNA_CONQ
			clr_country_flag = GOMEL_CONQ
			clr_country_flag = GORIZIA_CONQ
			clr_country_flag = GOY_CONQ
			clr_country_flag = GRE_CONQ
			clr_country_flag = GRE_EPIRUS_CONQ
			clr_country_flag = GRN_CONQ
			clr_country_flag = GRP_CONQ
			clr_country_flag = GUA_CONQ
			clr_country_flag = GUJ_CONQ
			clr_country_flag = GYA_CONQ
			clr_country_flag = HAI_CONQ
			clr_country_flag = HAW_CONQ
			clr_country_flag = HEJ_CONQ
			clr_country_flag = HND_CONQ
			clr_country_flag = HOLSTEIN_CONQ
			clr_country_flag = HOL_CONQ
			clr_country_flag = HON_CONQ
			clr_country_flag = HUN_CONQ
			clr_country_flag = HYD_CONQ
			clr_country_flag = ICE_CONQ
			clr_country_flag = IGUASSU_CONQ
			clr_country_flag = INC_CONQ
			clr_country_flag = IND_CONQ
			clr_country_flag = INS_CONQ
			clr_country_flag = IRE_CONQ
			clr_country_flag = IRQ_CONQ
			clr_country_flag = ISTRIA_CONQ
			clr_country_flag = ITA_CONQ
			clr_country_flag = IVO_CONQ
			clr_country_flag = JAM_CONQ
			clr_country_flag = JAP_CONQ
			clr_country_flag = KAC_CONQ
			clr_country_flag = KARABAKH_CONQ
			clr_country_flag = KARAVANKS_CONQ
			clr_country_flag = KARELIA_CONQ
			clr_country_flag = KARS_CONQ
			clr_country_flag = KAS_CONQ
			clr_country_flag = KEDAH_CONQ
			clr_country_flag = KELANTAN_CONQ
			clr_country_flag = KEN_CONQ
			clr_country_flag = KHI_CONQ
			clr_country_flag = KHUZESTAN_CONQ
			clr_country_flag = KOR_CONQ
			clr_country_flag = KOTOR_CONQ
			clr_country_flag = KRF_CONQ
			clr_country_flag = KUBAN_CONQ
			clr_country_flag = KUR_CONQ
			clr_country_flag = LABOURD_CONQ
			clr_country_flag = LAO_CONQ
			clr_country_flag = LAT_CONQ
			clr_country_flag = LAZISTAN_CONQ
			clr_country_flag = LBA_CONQ
			clr_country_flag = LEB_CONQ
			clr_country_flag = LEC_CONQ
			clr_country_flag = LIB_CONQ
			clr_country_flag = LILLE_CONQ
			clr_country_flag = LIMBURG_CONQ
			clr_country_flag = LIT_CONQ
			clr_country_flag = LOM_CONQ
			clr_country_flag = LUX_CONQ
			clr_country_flag = MAD_CONQ
			clr_country_flag = MAL_CONQ
			clr_country_flag = MAN_CONQ
			clr_country_flag = MASURIA_CONQ
			clr_country_flag = MDR_CONQ
			clr_country_flag = MEMEL_CONQ
			clr_country_flag = MEX_CONQ
			clr_country_flag = MISIONES_CONQ
			clr_country_flag = MLI_CONQ
			clr_country_flag = MLT_CONQ
			clr_country_flag = MLW_CONQ
			clr_country_flag = MNR_CONQ
			clr_country_flag = MNT_CONQ
			clr_country_flag = MON_CONQ
			clr_country_flag = MOR_CONQ
			clr_country_flag = MOULMEIN_CONQ
			clr_country_flag = MRT_CONQ
			clr_country_flag = MURA_CONQ
			clr_country_flag = MYS_CONQ
			clr_country_flag = MZB_CONQ
			clr_country_flag = NEE_CONQ
			clr_country_flag = NEP_CONQ
			clr_country_flag = NGA_CONQ
			clr_country_flag = NGF_CONQ
			clr_country_flag = NGR_CONQ
			clr_country_flag = NICE_CONQ
			clr_country_flag = NIC_CONQ
			clr_country_flag = NIS_CONQ
			clr_country_flag = NMB_CONQ
			clr_country_flag = NORTHERN_CHILE_CONQ
			clr_country_flag = NOR_CONQ
			clr_country_flag = NZL_CONQ
			clr_country_flag = OMA_CONQ
			clr_country_flag = ORI_CONQ
			clr_country_flag = PAK_CONQ
			clr_country_flag = PAN_CONQ
			clr_country_flag = PAP_CONQ
			clr_country_flag = PAP_STATES_CONQ
			clr_country_flag = PAR_CHACO_CONQ
			clr_country_flag = PAR_CONQ
			clr_country_flag = PASDECALAIS_CONQ
			clr_country_flag = PASTAZA_CONQ
			clr_country_flag = PATTANI_CONQ
			clr_country_flag = PER_CONQ
			clr_country_flag = PESHAWAR_CONQ
			clr_country_flag = PHI_CONQ
			clr_country_flag = PIEDMONT_CONQ
			clr_country_flag = PIR_CONQ
			clr_country_flag = PJB_CONQ
			clr_country_flag = PNG_CONQ
			clr_country_flag = POLESIA_CONQ
			clr_country_flag = POL_CONQ
			clr_country_flag = PONTAPORA_CONQ
			clr_country_flag = POR_CONQ
			clr_country_flag = POSEN_CONQ
			clr_country_flag = PRESSBURG_CONQ
			clr_country_flag = PRE_CONQ
			clr_country_flag = PRU_CONQ
			clr_country_flag = PUE_CONQ
			clr_country_flag = PUTUMAYO_CONQ
			clr_country_flag = QUETTA_CONQ
			clr_country_flag = RHI_CONQ
			clr_country_flag = RIO_DE_ORO_CONQ
			clr_country_flag = RJS_CONQ
			clr_country_flag = ROMANDY_CONQ
			clr_country_flag = ROM_CONQ
			clr_country_flag = ROUSSILLON_CONQ
			clr_country_flag = RUS_CONQ
			clr_country_flag = RWA_CONQ
			clr_country_flag = SAF_CONQ
			clr_country_flag = SAKHALIN_CONQ
			clr_country_flag = SAMABURI_CONQ
			clr_country_flag = SAR_CONQ
			clr_country_flag = SAVOY_CONQ
			clr_country_flag = SAXONY_CONQ
			clr_country_flag = SCHLESWIG_CONQ
			clr_country_flag = SCO_CONQ
			clr_country_flag = SEN_CONQ
			clr_country_flag = SER_CONQ
			clr_country_flag = SER_KOSOVO_CONQ
			clr_country_flag = SER_MACED_CONQ
			clr_country_flag = SHA_CONQ
			clr_country_flag = SIA_CONQ
			clr_country_flag = SIB_CONQ
			clr_country_flag = SIC_CONQ
			clr_country_flag = SIE_CONQ
			clr_country_flag = SIKKIM_CONQ
			clr_country_flag = SIK_CONQ
			clr_country_flag = SINAI_CONQ
			clr_country_flag = SINDH_CONQ
			clr_country_flag = SINGAPORE_CONQ
			clr_country_flag = SLO_CONQ
			clr_country_flag = SLO_TRCARP_CONQ
			clr_country_flag = SLV_CONQ
			clr_country_flag = SOM_CONQ
			clr_country_flag = SOUTHERN_LITHUANIA_CONQ
			clr_country_flag = SOUTHFRANCE_CONQ
			clr_country_flag = SPA_CONQ
			clr_country_flag = SPO_CONQ
			clr_country_flag = SRD_CONQ
			clr_country_flag = STUNGTRENG_CONQ
			clr_country_flag = SUD_CONQ
			clr_country_flag = SUR_CONQ
			clr_country_flag = SWE_CONQ
			clr_country_flag = SWI_CONQ
			clr_country_flag = SYRMIA_CONQ
			clr_country_flag = SYR_CONQ
			clr_country_flag = TAI_CONQ
			clr_country_flag = TENASSERIM_CONQ
			clr_country_flag = TESCHEN_CONQ
			clr_country_flag = THESSA_CONQ
			clr_country_flag = THRACE_CONQ
			clr_country_flag = TIB_CONQ
			clr_country_flag = TICINO_CONQ
			clr_country_flag = TOG_CONQ
			clr_country_flag = TRIESTE_CONQ
			clr_country_flag = TRI_CONQ
			clr_country_flag = TRK_CONQ
			clr_country_flag = TRM_CONQ
			clr_country_flag = TRP_CONQ
			clr_country_flag = TRS_CONQ
			clr_country_flag = TRU_CONQ
			clr_country_flag = TUN_CONQ
			clr_country_flag = TUR_CONQ
			clr_country_flag = TUS_CONQ
			clr_country_flag = TUVA_CONQ
			clr_country_flag = TZN_CONQ
			clr_country_flag = UGA_CONQ
			clr_country_flag = UKR_CONQ
			clr_country_flag = UPPERSILESIA_CONQ
			clr_country_flag = URG_CONQ
			clr_country_flag = USA_CONQ
			clr_country_flag = VCR_CONQ
			clr_country_flag = VEN_CONQ
			clr_country_flag = VERVIERS_CONQ
			clr_country_flag = VILNIUS_CONQ
			clr_country_flag = VIN_CONQ
			clr_country_flag = VIZAG_CONQ
			clr_country_flag = VNC_CONQ
			clr_country_flag = VOJVODINA_CONQ
			clr_country_flag = VOLKOVYSK_CONQ
			clr_country_flag = VOL_CONQ
			clr_country_flag = WAL_CONQ
			clr_country_flag = WESTBANAT_CONQ
			clr_country_flag = WESTERSCHELDT_CONQ
			clr_country_flag = WESTPRUSSIA_CONQ
			clr_country_flag = WHR_CONQ
			clr_country_flag = WIF_CONQ
			clr_country_flag = WLS_CONQ
			clr_country_flag = YEM_CONQ
			clr_country_flag = ZAM_CONQ
			clr_country_flag = ZIM_CONQ
			hidden_effect = {
				every_state = { clear_occupy_state_annexation = yes }
			}
			recheck_annexations_immediate = yes
		}
	}
}

KR_foreign_support = {
	return_cores_to_ally = {
		icon = generic_agreement

		available = {
			if = {
				limit = { has_war = yes }
				surrender_progress < 0.20
			}
			else = {
				has_war = no
			}
		}

		target_array = faction_members
		target_array = subjects

		target_trigger = {
			country_exists = FROM
			is_ally_with = FROM
			NOT = {
				has_country_flag = KR_returning_land
				has_country_flag = KR_checking_for_possible_annexations
			}
			any_owned_state = {
				is_claim_or_core_of_FROM = yes
				is_claim_or_core_of_ROOT = no
				NOT = { has_variable = can_integrate_@ROOT }
				NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
				NOT = { has_state_flag = KR_keeping_state@ROOT }
				OR = {
					is_coastal = yes
					any_neighbor_state = { is_owned_by = FROM }
				}
			}
		}

		cost = 0
		fire_only_once = no

		ai_will_do = {
			factor = 10
			modifier = {
				factor = 0.1
				FROM = {
					is_subject = yes
					NOT = { is_subject_of = ROOT }
				}
			}
		}

		complete_effect = {
			log = "[GetDateText]: [Root.GetName]: Decision return_cores_to_ally target: [From.GetName]"
			set_country_flag = KR_returning_land
			FROM = { save_event_target_as = return_to }
			country_event = generic_events.75
		}
	}
}
